type HttpHeader = record { value : text; name : text };
type HttpResponse = record {
  status : nat;
  body : blob;
  headers : vec HttpHeader;
};
type Result = variant { Ok : SupplyDistribution; Err : text };
type SupplyDistribution = record {
  date : text;
  supply : float64;
  percentage : float64;
};
type TransformArgs = record { context : blob; response : HttpResponse };
type TransformContext = record {
  function : func (TransformArgs) -> (HttpResponse) query;
  context : blob;
};
service : {
  fetch_supply_data : (text) -> (Result);
  get_api_key : () -> (text) query;
  get_last_response : () -> (text) query;
  greet : (text) -> (text) query;
  set_api_key : (text) -> ();
  transform_response : (TransformContext, HttpResponse) -> (HttpResponse) query;
}
